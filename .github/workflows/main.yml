name: Main

on: push

jobs:
  # deploy on pushes to master branch
  # assumes aws credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
  # are configured in travis settings
  # see https://serverless.com/framework/docs/providers/aws/guide/credentials/
  # for more information
#   build:
#     if: github.ref == 'refs/heads/master'
#     runs-on: ubuntu-latest
#     steps:

#       - name: Set up Rust
#         uses: hecrj/setup-rust-action@v1

#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Codestyle
#         run: cargo fmt --all -- --check

#       - name: Compile
#         run: cargo check --all

#       - name: Lint
#         run: cargo clippy --all-targets -- -D clippy::all

#       - name: Test
#         run: cargo test

#       # Since Lambda uses Amazon Linux,
#       # the executable targets x86_64-unknown-linux-musl platform.
#       - name: Build for Amazon Linux
#         run: |
#           sudo apt-get update
#           sudo apt-get -y install pkg-config libssl-dev musl-tools zip
#           export PKG_CONFIG_ALLOW_CROSS=1
#           rustup target add x86_64-unknown-linux-musl
#           cargo build --release --target x86_64-unknown-linux-musl
#           cp ./target/x86_64-unknown-linux-musl/release/bootstrap ./bootstrap
#           zip ./deploy/lambda.zip bootstrap && rm bootstrap
          
  deploy:
    # needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deploy
    env:
      AWS_STS_REGIONAL_ENDPOINTS: regional
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      - name: Directory
        run: ls

      - name: Terraform format
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init
      
      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} terraform apply -auto-approve
